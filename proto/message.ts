// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: message.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "messages";

export interface JoinMessage {
  playerId: string;
}

export interface WelcomeMessage {
  thingId: number;
}

export interface Message {
  join?: JoinMessage | undefined;
  welcome?: WelcomeMessage | undefined;
}

function createBaseJoinMessage(): JoinMessage {
  return { playerId: "" };
}

export const JoinMessage = {
  encode(message: JoinMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JoinMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinMessage {
    return { playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "" };
  },

  toJSON(message: JoinMessage): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinMessage>, I>>(base?: I): JoinMessage {
    return JoinMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinMessage>, I>>(object: I): JoinMessage {
    const message = createBaseJoinMessage();
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseWelcomeMessage(): WelcomeMessage {
  return { thingId: 0 };
}

export const WelcomeMessage = {
  encode(message: WelcomeMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.thingId !== 0) {
      writer.uint32(8).uint32(message.thingId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WelcomeMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWelcomeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.thingId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WelcomeMessage {
    return { thingId: isSet(object.thingId) ? globalThis.Number(object.thingId) : 0 };
  },

  toJSON(message: WelcomeMessage): unknown {
    const obj: any = {};
    if (message.thingId !== 0) {
      obj.thingId = Math.round(message.thingId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WelcomeMessage>, I>>(base?: I): WelcomeMessage {
    return WelcomeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WelcomeMessage>, I>>(object: I): WelcomeMessage {
    const message = createBaseWelcomeMessage();
    message.thingId = object.thingId ?? 0;
    return message;
  },
};

function createBaseMessage(): Message {
  return { join: undefined, welcome: undefined };
}

export const Message = {
  encode(message: Message, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.join !== undefined) {
      JoinMessage.encode(message.join, writer.uint32(10).fork()).ldelim();
    }
    if (message.welcome !== undefined) {
      WelcomeMessage.encode(message.welcome, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Message {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.join = JoinMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.welcome = WelcomeMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      join: isSet(object.join) ? JoinMessage.fromJSON(object.join) : undefined,
      welcome: isSet(object.welcome) ? WelcomeMessage.fromJSON(object.welcome) : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.join !== undefined) {
      obj.join = JoinMessage.toJSON(message.join);
    }
    if (message.welcome !== undefined) {
      obj.welcome = WelcomeMessage.toJSON(message.welcome);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.join = (object.join !== undefined && object.join !== null)
      ? JoinMessage.fromPartial(object.join)
      : undefined;
    message.welcome = (object.welcome !== undefined && object.welcome !== null)
      ? WelcomeMessage.fromPartial(object.welcome)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
